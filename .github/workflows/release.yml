# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Create Release

on:
  workflow_dispatch:
    inputs:
      snapshot:
        description: 'is snapshot version?'
        type: boolean
        default: true
        required: true
  push:
    branches:
      - master

jobs:
  release:

    strategy:
      matrix:
        os: ['ubuntu-latest']
        go-version: [1.18.x]

    runs-on: ${{ matrix.os }}

    steps:
  
      -
        name: Set up Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
        id: go
     
      -
        name: Compute release version
        uses: AirVantage/github-actions/version-action@v37
        id: get-version
        with:
          is-snapshot: ${{ github.event.inputs.snapshot == 'true' && '1' || '0' }} 
        
      -
        name: GitHub Tag & Release
        uses: AirVantage/github-actions/github-release-action@v37
        id: create-release
        with:
          version: ${{ steps.get-version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: ${{ github.event.inputs.snapshot == 'true' && '1' || '0' }} 


      -
        name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          # Fetch whole repository to get release tags
          # See https://github.com/actions/checkout/issues/701
          fetch-depth: 0

      # Option B: split checkout + local tags ?
      #-
      #  name: Tag local copy
      #  run: git tag ${{ steps.get-version.outputs.version }}
        
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution
          # GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      -
        name: Release on JIRA
        if: github.event.inputs.snapshot == 'false'
        continue-on-error: true # Useful if JIRA is down
        uses: AirVantage/github-actions/tag-jira-action@v37
        with:
          version: ${{ steps.get-version.outputs.version }}
          jira-url: ${{ secrets.JIRA_URL }}
          jira-username: ${{ secrets.JIRA_USERNAME }}
          jira-password: ${{ secrets.JIRA_PASSWORD }}
          repo-name: ${{ github.event.repository.name }}
